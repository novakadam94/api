#!/usr/bin/env python

# Copyright (C) 2015 MTA SZTAKI

"""
This script stops a single node using OCCO-CloudHandler and
OCCO-InfraProcessor.

Author: adam.visegradi@sztaki.mta.hu
"""

import occo.api.occoapp as occoapp
import occo.infobroker as ib
import yaml

def setup_args(cfg):
    cfg.add_argument('-d', '--dynamic_state', type=occoapp.yaml_file, default=None)
    cfg.add_argument('-i', dest='infraid', default=None)

occoapp.setup(setup_args)

if not occoapp.args.infraid and not occoapp.args.dynamic_state:
    print 'Provide either infrastructure id (-i) or the dynamic state (-d)'
    exit(2)

import logging
log = logging.getLogger('occo')

log.debug('Configuration:\n%r', occoapp.configuration)

if occoapp.args.infraid:
    log.info('Infrastructure ID supplied (%s), '
             'loading infrastructure state',
             occoapp.args.infraid)
    dynamic_state = ib.main_info_broker.get(
        'infrastructure.state', occoapp.args.infraid)
    log.debug('Infrastructure state:\n%s',
              yaml.dump(dynamic_state, default_flow_style=False))
else:
    dynamic_state = occoapp.args.dynamic_state

from occo.infraprocessor import InfraProcessor
ip = InfraProcessor.instantiate(
    protocol='basic',
    user_data_store=occoapp.uds,
    cloudhandler=occoapp.cloudhandler,
    servicecomposer=occoapp.servicecomposer)

from occo.util import flatten
nodes = flatten(i.itervalues() for i in dynamic_state.itervalues())

drop_node_commands = [ip.cri_drop_node(n) for n in nodes]
log.debug('DropNode:\n%s',
          yaml.dump(drop_node_commands, default_flow_style=False))

ip.push_instructions(drop_node_commands)

if occoapp.args.infraid:
    ip.push_instructions(ip.cri_drop_environment(occoapp.args.infraid))
