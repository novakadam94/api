#!/usr/bin/env python

# Copyright (C) 2015 MTA SZTAKI

"""
This script starts an infrastructure using OCCO.

Author: adam.visegradi@sztaki.mta.hu
"""

import occo.util as util
import occo.api.occoapp as occoapp
import occo.api.manager as manager
from occo.infobroker import main_info_broker
from flask import Flask, request, jsonify

def setup_args(cfg):
    cfg.add_argument('--host', type=str, default='127.0.0.1')
    cfg.add_argument('--port', type=int, default=5000)
    pass # TODO: reconnect to already submitted infrstructures

class RequestException(Exception):
    def __init__(self, status_code, reason, *args):
        super(RequestException, self).__init__(*args)
        self.status_code, self.reason = status_code, reason
    def to_dict(self):
        return dict(status_code=self.status_code,
                    reason=self.reason,
                    message=str(self))

if __name__ == '__main__':

    occoapp.setup(setup_args)

    flask = Flask('occo_manager')

    import logging
    log = logging.getLogger('occo.manager-service')

    infra_processor_params = dict(
        protocol='basic',
        user_data_store=occoapp.uds,
        cloudhandler=occoapp.cloudhandler,
        servicecomposer=occoapp.servicecomposer)

    manager = manager.InfrastructureManager(occoapp.uds, infra_processor_params)

    @flask.errorhandler(RequestException)
    def handled_exception(error):
        log.error('An exception occured: %r', error)
        print error.to_dict()
        return jsonify(error.to_dict())
    @flask.errorhandler(Exception)
    def unhandled_exception(error):
        import traceback as tb
        log.error('An unhandled exception occured: %r\n%s',
                  error, tb.format_exc(error))
        response = jsonify(dict(message=error.message))
        response.status_code = 500
        return response

    @flask.route('/infrastructures/<infraid>/report', methods=['GET'])
    def infra_state_report(infraid):
        log.debug('Serving request %s infrastructures/%r/report',
                  request.method, infraid)
        state = main_info_broker.get('infrastructure.state_report', infraid)
        return jsonify(state)

        try:
            result = manager.add(infra_desc)
        except Exception as ex:
            log.exception('manager.add:')
            raise RequestException(400, str(ex))
        else:
            return result

    @flask.route('/infrastructures/', methods=['GET', 'POST'])
    @flask.route('/infrastructures/<infraid>', methods=['GET', 'DELETE'])
    def submit_infrastructure(infraid=None):
        log.debug('Serving request %s infrastructures/%r',
                  request.method, infraid)
        if infraid:
            if request.method == 'DELETE':
                if infraid in manager.process_table:
                    manager.stop_provisioning(infraid)
                manager.tear_down(infraid)
                return jsonify(dict())
            else:
                state = main_info_broker.get('infrastructure.state', infraid)
                return jsonify(state)

        if request.method == 'GET':
            return jsonify(dict(infrastructures=manager.process_table.keys()))

        infra_desc = request.stream.read()
        log.info('Submitting infrastructure:\n%s', util.yamldump(infra_desc))
        if not infra_desc:
            raise RequestException(400, 'Empty POST data')

        try:
            result = manager.add(infra_desc)
        except Exception as ex:
            log.exception('manager.add:')
            raise RequestException(400, str(ex))
        else:
            return result

    try:
        flask.run(host=occoapp.args.host,
                  port=occoapp.args.port)
        # TODO: Expose the manager through Flask
        # TODO: Expose InfoBroker

    except KeyboardInterrupt:
        log.info('Ctrl+C - Exiting.')
        for i in manager.process_table.iterkeys():
            log.info('Infrastructure left running: %r', i)
