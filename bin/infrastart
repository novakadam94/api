#!/usr/bin/env python

# Copyright (C) 2015 MTA SZTAKI

"""
This script starts an infrastructure using OCCO.

Author: adam.visegradi@sztaki.mta.hu
"""

import occo.api.occoapp as occoapp
import occo.util as util

def setup_args(cfg):
    cfg.add_argument('infra_def', type=occoapp.yaml_file)
    cfg.add_argument('--parallelize',
                     action='store_const', dest='strategy',
                     const='parallel', default='sequential',
                     help='Parallelize processing instructions')

def submit_infrastructure(infra_description):
    from occo.compiler import StaticDescription
    from occo.enactor import Enactor
    from occo.infraprocessor import InfraProcessor
    # This will not be needed when the Enactor starts using the main_info_broker
    from occo.infobroker import main_info_broker

    uds = occoapp.uds
    compiled_infrastructure = StaticDescription(infra_description)
    uds.add_infrastructure(compiled_infrastructure)

    infraprocessor = InfraProcessor.instantiate(
                                    protocol='basic',
                                    process_strategy=occoapp.args.strategy,
                                    user_data_store=uds,
                                    cloudhandler=occoapp.cloudhandler,
                                    servicecomposer=occoapp.servicecomposer)
    enactor = Enactor(compiled_infrastructure.infra_id, infraprocessor)
    return compiled_infrastructure.infra_id, infraprocessor, enactor

occoapp.setup(setup_args)

import logging
log = logging.getLogger('occo')

infra_description = occoapp.args.infra_def
log.debug('Infrastructure description:\n%r', infra_description)

infraid, ip, enactor = submit_infrastructure(infra_description)

log.info('Submitted infrastructure: %r', infraid)

try:
    enactor.make_a_pass()
except KeyboardInterrupt:
    log.info('Ctrl+C - Destroying infrastructure and exiting.')
    occoapp.killall(infraid, ip, occoapp.uds)
except Exception:
    log.exception('An error occured while building the infrastructure:')
    occoapp.killall(infraid, ip, occoapp.uds)
    log.error('An unrecoverable error occured; the partially built '
              'infrastructure has been torn down.')
    exit(1)
else:
    import yaml
    from occo.infobroker import main_info_broker
    cleaner = util.Cleaner(['context'])
    state = main_info_broker.get('infrastructure.state', infraid)
    log.info('Submitted infrastructure dynamic state:\n%s',
             yaml.dump(cleaner.deep_copy(state),
                       default_flow_style=False))
    print infraid
